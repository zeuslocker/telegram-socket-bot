# Definitions for development environment only
version: '3'

services:
    app:
        container_name: telegram-socket-bot_app
        build: .
        depends_on:
            mongo:
                condition: service_started
            mysql:
                condition: service_healthy
        ports:
            - 8080:80
    mongo:
        container_name: telegram-socket-bot_mongo
        image: mongo:4.4.3-bionic
        environment:
            MONGO_INITDB_ROOT_USERNAME: admin
            MONGO_INITDB_ROOT_PASSWORD: admin
        volumes:
            - telegram-socket-bot_data:/data/db
        ports:
            - 27020:27017
    mysql:
        container_name: telegram-socket-bot_mysql
        image: mysql:8.0.23
        environment:
            MYSQL_ROOT_PASSWORD: root
            MYSQL_USER: admin
            MYSQL_PASSWORD: admin
        volumes:
            - telegram-socket-bot_logs:/var/lib/
            # Create the initial db configuration on container creation
            - ./setup.sql:/docker-entrypoint-initdb.d/setup.sql
        ports:
            - 3306:3306
        healthcheck:
            test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
            timeout: 1s
            retries: 10
    certbot:
        image: certbot/certbot
        container_name: certbot
        restart: always
        volumes:
        - certbot-webroot:/webroots/solarwebgg.com/.well-known
        - certbot-letsencrypt:/etc/letsencrypt

    nginx:
        image: nginx:mainline-alpine
        container_name: nginx
        ports:
        - "80:80"
        - "443:443"
        restart: always
        volumes:
        - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
        - certbot-webroot:/webroots/solarwebgg.com/.well-known
        - certbot-letsencrypt:/etc/letsencrypt
        # command: [nginx-debug, '-g', 'daemon off;']

volumes:
    telegram-socket-bot_data:
    telegram-socket-bot_logs:
    certbot-webroot:
    certbot-letsencrypt:
